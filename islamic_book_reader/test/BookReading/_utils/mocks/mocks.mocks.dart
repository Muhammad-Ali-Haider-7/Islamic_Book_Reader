// Mocks generated by Mockito 5.4.4 from annotations
// in islamic_book_reader/test/BookReading/_utils/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i13;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i10;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:islamic_book_reader/BookReading/data/datasources/local_bookReading_datasource.dart'
    as _i18;
import 'package:islamic_book_reader/BookReading/data/datasources/remote_bookReading_datasource.dart'
    as _i19;
import 'package:islamic_book_reader/BookReading/data/model/arabic/arabic_model.dart'
    as _i17;
import 'package:islamic_book_reader/BookReading/data/model/books/books_model.dart'
    as _i14;
import 'package:islamic_book_reader/BookReading/data/model/content/content_model.dart'
    as _i16;
import 'package:islamic_book_reader/BookReading/data/model/heading/heading_model.dart'
    as _i15;
import 'package:islamic_book_reader/BookReading/domain/entity/arabic_entity.dart'
    as _i24;
import 'package:islamic_book_reader/BookReading/domain/entity/books_entity.dart'
    as _i21;
import 'package:islamic_book_reader/BookReading/domain/entity/combined_entities.dart'
    as _i29;
import 'package:islamic_book_reader/BookReading/domain/entity/content_entity.dart'
    as _i23;
import 'package:islamic_book_reader/BookReading/domain/entity/heading_entity.dart'
    as _i22;
import 'package:islamic_book_reader/BookReading/domain/repository/bookReading_repository.dart'
    as _i11;
import 'package:islamic_book_reader/BookReading/domain/usecases/add_to_localDatabase_usecase.dart'
    as _i25;
import 'package:islamic_book_reader/BookReading/domain/usecases/get_Book_list_from_localDatabase_usecase.dart'
    as _i26;
import 'package:islamic_book_reader/BookReading/domain/usecases/get_from_firebase_usecase.dart'
    as _i27;
import 'package:islamic_book_reader/BookReading/domain/usecases/get_from_localDatabase_usecase.dart'
    as _i28;
import 'package:islamic_book_reader/Configrations/data/model/fontSize_model.dart'
    as _i7;
import 'package:islamic_book_reader/essentials/databaseHelper.dart' as _i9;
import 'package:islamic_book_reader/essentials/failure.dart' as _i20;
import 'package:logging/logging.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_1 extends _i1.SmartFake implements _i3.Settings {
  _FakeSettings_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_3 extends _i1.SmartFake implements _i4.WriteBatch {
  _FakeWriteBatch_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_4 extends _i1.SmartFake
    implements _i4.LoadBundleTask {
  _FakeLoadBundleTask_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_5<T1 extends Object?> extends _i1.SmartFake
    implements _i4.QuerySnapshot<T1> {
  _FakeQuerySnapshot_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_6<T extends Object?> extends _i1.SmartFake
    implements _i4.Query<T> {
  _FakeQuery_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_7<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_9 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_10 extends _i1.SmartFake
    implements _i4.AggregateQuery {
  _FakeAggregateQuery_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_11 extends _i1.SmartFake
    implements _i4.SnapshotMetadata {
  _FakeSnapshotMetadata_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_12 extends _i1.SmartFake implements _i6.Database {
  _FakeDatabase_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFontSizeModel_13 extends _i1.SmartFake implements _i7.FontSizeModel {
  _FakeFontSizeModel_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_14 extends _i1.SmartFake implements _i8.Logger {
  _FakeLogger_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseHelper_15 extends _i1.SmartFake
    implements _i9.DatabaseHelper {
  _FakeDatabaseHelper_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_16<L, R> extends _i1.SmartFake implements _i10.Either<L, R> {
  _FakeEither_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookReadingRepository_17 extends _i1.SmartFake
    implements _i11.BookReadingRepository {
  _FakeBookReadingRepository_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseId => (super.noSuchMethod(
        Invocation.getter(#databaseId),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
      ) as String);

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
        Invocation.setter(
          #databaseId,
          _databaseId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i3.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_1(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i3.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i4.CollectionReference<Map<String, dynamic>>);

  @override
  _i4.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_3(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i4.WriteBatch);

  @override
  _i5.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> enablePersistence(
          [_i3.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i4.LoadBundleTask loadBundle(_i13.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_4(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i4.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {
            #sslEnabled: sslEnabled,
            #automaticHostMapping: automaticHostMapping,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i4.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i3.GetOptions? options = const _i3.GetOptions(),
    required _i4.FromFirestore<T>? fromFirestore,
    required _i4.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i5.Future<_i4.QuerySnapshot<T>>.value(_FakeQuerySnapshot_5<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i3.GetOptions? options = const _i3.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_5<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i5.Future<_i4.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_6<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i4.Query<Map<String, dynamic>>);

  @override
  _i5.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_7<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i4.DocumentReference<Map<String, dynamic>>);

  @override
  _i5.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);

  @override
  _i5.Future<T> runTransaction<T>(
    _i4.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setIndexConfiguration({
    required List<_i3.Index>? indexes,
    List<_i3.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i4.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_9(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i5.Future<_i4.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i5.Future<_i4.DocumentReference<T>>.value(
            _FakeDocumentReference_7<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i5.Future<_i4.DocumentReference<T>>);

  @override
  _i4.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_7<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i4.DocumentReference<T>);

  @override
  _i4.CollectionReference<R> withConverter<R extends Object?>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeCollectionReference_2<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i4.CollectionReference<R>);

  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> endBeforeDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i5.Future<_i4.QuerySnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i5.Future<_i4.QuerySnapshot<T>>.value(_FakeQuerySnapshot_5<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i5.Future<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i5.Stream<_i4.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i3.ListenSource? source = _i3.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i5.Stream<_i4.QuerySnapshot<T>>.empty(),
      ) as _i5.Stream<_i4.QuerySnapshot<T>>);

  @override
  _i4.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> startAfterDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> startAtDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_6<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i4.Query<T>);

  @override
  _i4.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_10(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i4.AggregateQuery);

  @override
  _i4.AggregateQuery aggregate(
    _i3.AggregateField? aggregateField1, [
    _i3.AggregateField? aggregateField2,
    _i3.AggregateField? aggregateField3,
    _i3.AggregateField? aggregateField4,
    _i3.AggregateField? aggregateField5,
    _i3.AggregateField? aggregateField6,
    _i3.AggregateField? aggregateField7,
    _i3.AggregateField? aggregateField8,
    _i3.AggregateField? aggregateField9,
    _i3.AggregateField? aggregateField10,
    _i3.AggregateField? aggregateField11,
    _i3.AggregateField? aggregateField12,
    _i3.AggregateField? aggregateField13,
    _i3.AggregateField? aggregateField14,
    _i3.AggregateField? aggregateField15,
    _i3.AggregateField? aggregateField16,
    _i3.AggregateField? aggregateField17,
    _i3.AggregateField? aggregateField18,
    _i3.AggregateField? aggregateField19,
    _i3.AggregateField? aggregateField20,
    _i3.AggregateField? aggregateField21,
    _i3.AggregateField? aggregateField22,
    _i3.AggregateField? aggregateField23,
    _i3.AggregateField? aggregateField24,
    _i3.AggregateField? aggregateField25,
    _i3.AggregateField? aggregateField26,
    _i3.AggregateField? aggregateField27,
    _i3.AggregateField? aggregateField28,
    _i3.AggregateField? aggregateField29,
    _i3.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_10(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i4.AggregateQuery);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i4.QueryDocumentSnapshot<T>>[],
      ) as List<_i4.QueryDocumentSnapshot<T>>);

  @override
  List<_i4.DocumentChange<T>> get docChanges => (super.noSuchMethod(
        Invocation.getter(#docChanges),
        returnValue: <_i4.DocumentChange<T>>[],
      ) as List<_i4.DocumentChange<T>>);

  @override
  _i4.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_11(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.SnapshotMetadata);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QueryDocumentSnapshot<T> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i4.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_7<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i4.DocumentReference<T>);

  @override
  _i4.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_11(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  T data() => (super.noSuchMethod(
        Invocation.method(
          #data,
          [],
        ),
        returnValue: _i12.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
      ) as T);

  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i9.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i6.Database>.value(_FakeDatabase_12(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i6.Database>);

  @override
  _i5.Future<void> addConfig(
    int? heading,
    int? content,
    int? arabic,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addConfig,
          [
            heading,
            content,
            arabic,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateConfig(
    int? heading,
    int? content,
    int? arabic,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConfig,
          [
            heading,
            content,
            arabic,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i7.FontSizeModel> getConfig() => (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [],
        ),
        returnValue: _i5.Future<_i7.FontSizeModel>.value(_FakeFontSizeModel_13(
          this,
          Invocation.method(
            #getConfig,
            [],
          ),
        )),
      ) as _i5.Future<_i7.FontSizeModel>);

  @override
  _i5.Future<void> addWholeBook(
    _i14.BookModel? book,
    List<_i15.HeadingModel>? headings,
    List<_i16.ContentModel>? contents,
    List<_i17.ArabicModel>? arabics,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWholeBook,
          [
            book,
            headings,
            contents,
            arabics,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addBooks(_i14.BookModel? book) => (super.noSuchMethod(
        Invocation.method(
          #addBooks,
          [book],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addHeadings(List<_i15.HeadingModel>? headings) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHeadings,
          [headings],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addContents(List<_i16.ContentModel>? contents) =>
      (super.noSuchMethod(
        Invocation.method(
          #addContents,
          [contents],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addArabic(List<_i17.ArabicModel>? arabics) =>
      (super.noSuchMethod(
        Invocation.method(
          #addArabic,
          [arabics],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i14.BookModel>> getBooks() => (super.noSuchMethod(
        Invocation.method(
          #getBooks,
          [],
        ),
        returnValue: _i5.Future<List<_i14.BookModel>>.value(<_i14.BookModel>[]),
      ) as _i5.Future<List<_i14.BookModel>>);

  @override
  _i5.Future<List<_i15.HeadingModel>> getHeadings(String? BookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHeadings,
          [BookId],
        ),
        returnValue:
            _i5.Future<List<_i15.HeadingModel>>.value(<_i15.HeadingModel>[]),
      ) as _i5.Future<List<_i15.HeadingModel>>);

  @override
  _i5.Future<List<_i16.ContentModel>> getContent(String? HeadingId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContent,
          [HeadingId],
        ),
        returnValue:
            _i5.Future<List<_i16.ContentModel>>.value(<_i16.ContentModel>[]),
      ) as _i5.Future<List<_i16.ContentModel>>);

  @override
  _i5.Future<List<_i17.ArabicModel>> getArabic(String? contentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArabic,
          [contentId],
        ),
        returnValue:
            _i5.Future<List<_i17.ArabicModel>>.value(<_i17.ArabicModel>[]),
      ) as _i5.Future<List<_i17.ArabicModel>>);

  @override
  _i5.Future<int> deleteBook(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBook,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [LocalBookReadingDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalBookReadingDatasource extends _i1.Mock
    implements _i18.LocalBookReadingDatasource {
  MockLocalBookReadingDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_14(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i8.Logger);

  @override
  _i9.DatabaseHelper get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _FakeDatabaseHelper_15(
          this,
          Invocation.getter(#instance),
        ),
      ) as _i9.DatabaseHelper);

  @override
  _i5.Future<void> addWholeBook({
    required _i14.BookModel? book,
    required List<_i15.HeadingModel>? headings,
    required List<_i16.ContentModel>? Contents,
    required List<_i17.ArabicModel>? Arabics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWholeBook,
          [],
          {
            #book: book,
            #headings: headings,
            #Contents: Contents,
            #Arabics: Arabics,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addBook({required _i14.BookModel? book}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBook,
          [],
          {#book: book},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addHeadings({required List<_i15.HeadingModel>? headings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHeadings,
          [],
          {#headings: headings},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addContents({required List<_i16.ContentModel>? Contents}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addContents,
          [],
          {#Contents: Contents},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addArabics({required List<_i17.ArabicModel>? Arabics}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addArabics,
          [],
          {#Arabics: Arabics},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i14.BookModel>> getBooks() => (super.noSuchMethod(
        Invocation.method(
          #getBooks,
          [],
        ),
        returnValue: _i5.Future<List<_i14.BookModel>>.value(<_i14.BookModel>[]),
      ) as _i5.Future<List<_i14.BookModel>>);

  @override
  _i5.Future<List<_i15.HeadingModel>> getHeadings({required String? BookId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHeadings,
          [],
          {#BookId: BookId},
        ),
        returnValue:
            _i5.Future<List<_i15.HeadingModel>>.value(<_i15.HeadingModel>[]),
      ) as _i5.Future<List<_i15.HeadingModel>>);

  @override
  _i5.Future<List<_i16.ContentModel>> getContent(
          {required String? headingId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContent,
          [],
          {#headingId: headingId},
        ),
        returnValue:
            _i5.Future<List<_i16.ContentModel>>.value(<_i16.ContentModel>[]),
      ) as _i5.Future<List<_i16.ContentModel>>);

  @override
  _i5.Future<List<_i17.ArabicModel>> getArabic({required String? contentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArabic,
          [],
          {#contentId: contentId},
        ),
        returnValue:
            _i5.Future<List<_i17.ArabicModel>>.value(<_i17.ArabicModel>[]),
      ) as _i5.Future<List<_i17.ArabicModel>>);
}

/// A class which mocks [RemoteBookReadingDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteBookReadingDatasource extends _i1.Mock
    implements _i19.RemoteBookReadingDatasource {
  MockRemoteBookReadingDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_9(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);

  @override
  _i5.Future<List<Map<String, dynamic>>> getBooksFromFirestore() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBooksFromFirestore,
          [],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getHeadingFromFirestore(
          {required String? BookId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHeadingFromFirestore,
          [],
          {#BookId: BookId},
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getContentFromFirestore({
    required String? BookId,
    required String? HeadingId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentFromFirestore,
          [],
          {
            #BookId: BookId,
            #HeadingId: HeadingId,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getArabicFromFirestore({
    required String? BookId,
    required String? HeadingId,
    required String? ContentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArabicFromFirestore,
          [],
          {
            #BookId: BookId,
            #HeadingId: HeadingId,
            #ContentId: ContentId,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [BookReadingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookReadingRepository extends _i1.Mock
    implements _i11.BookReadingRepository {
  MockBookReadingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>>
      getBooksFromFirestore() => (super.noSuchMethod(
            Invocation.method(
              #getBooksFromFirestore,
              [],
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.RemoteDatabaseFailure,
                    List<_i21.BooksEntity>>>.value(_FakeEither_16<
                _i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>(
              this,
              Invocation.method(
                #getBooksFromFirestore,
                [],
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>>);

  @override
  _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>
      addBookFromFireStore({
    required String? bookName,
    required String? bookId,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #addBookFromFireStore,
              [],
              {
                #bookName: bookName,
                #bookId: bookId,
              },
            ),
            returnValue:
                _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>.value(
                    _FakeEither_16<_i20.RemoteDatabaseFailure, void>(
              this,
              Invocation.method(
                #addBookFromFireStore,
                [],
                {
                  #bookName: bookName,
                  #bookId: bookId,
                },
              ),
            )),
          ) as _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, List<_i21.BooksEntity>>>
      getBooksFromLocalDatabase() => (super.noSuchMethod(
            Invocation.method(
              #getBooksFromLocalDatabase,
              [],
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    List<_i21.BooksEntity>>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, List<_i21.BooksEntity>>(
              this,
              Invocation.method(
                #getBooksFromLocalDatabase,
                [],
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.LocalDatabaseFailure, List<_i21.BooksEntity>>>);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, List<_i22.HeadingEntity>>>
      getHeadingFromLocalDatabase({required String? BookId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getHeadingFromLocalDatabase,
              [],
              {#BookId: BookId},
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    List<_i22.HeadingEntity>>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, List<_i22.HeadingEntity>>(
              this,
              Invocation.method(
                #getHeadingFromLocalDatabase,
                [],
                {#BookId: BookId},
              ),
            )),
          ) as _i5.Future<
              _i10
              .Either<_i20.LocalDatabaseFailure, List<_i22.HeadingEntity>>>);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, List<_i23.ContentEntity>>>
      getContentFromLocalDatabase({required String? HeadingId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getContentFromLocalDatabase,
              [],
              {#HeadingId: HeadingId},
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    List<_i23.ContentEntity>>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, List<_i23.ContentEntity>>(
              this,
              Invocation.method(
                #getContentFromLocalDatabase,
                [],
                {#HeadingId: HeadingId},
              ),
            )),
          ) as _i5.Future<
              _i10
              .Either<_i20.LocalDatabaseFailure, List<_i23.ContentEntity>>>);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, List<_i24.ArabicEntity>>>
      getArabicFromLocalDatabse({required String? ContentId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getArabicFromLocalDatabse,
              [],
              {#ContentId: ContentId},
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    List<_i24.ArabicEntity>>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, List<_i24.ArabicEntity>>(
              this,
              Invocation.method(
                #getArabicFromLocalDatabse,
                [],
                {#ContentId: ContentId},
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.LocalDatabaseFailure, List<_i24.ArabicEntity>>>);
}

/// A class which mocks [AddToLocaldatabaseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToLocaldatabaseUsecase extends _i1.Mock
    implements _i25.AddToLocaldatabaseUsecase {
  MockAddToLocaldatabaseUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.BookReadingRepository get bookReadingRepository => (super.noSuchMethod(
        Invocation.getter(#bookReadingRepository),
        returnValue: _FakeBookReadingRepository_17(
          this,
          Invocation.getter(#bookReadingRepository),
        ),
      ) as _i11.BookReadingRepository);

  @override
  _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>
      addBookFromFireStore({
    required String? bookName,
    required String? bookId,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #addBookFromFireStore,
              [],
              {
                #bookName: bookName,
                #bookId: bookId,
              },
            ),
            returnValue:
                _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>.value(
                    _FakeEither_16<_i20.RemoteDatabaseFailure, void>(
              this,
              Invocation.method(
                #addBookFromFireStore,
                [],
                {
                  #bookName: bookName,
                  #bookId: bookId,
                },
              ),
            )),
          ) as _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, void>>);
}

/// A class which mocks [GetBookListFromLocalDatabaseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookListFromLocalDatabaseUsecase extends _i1.Mock
    implements _i26.GetBookListFromLocalDatabaseUsecase {
  MockGetBookListFromLocalDatabaseUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.BookReadingRepository get bookReadingRepository => (super.noSuchMethod(
        Invocation.getter(#bookReadingRepository),
        returnValue: _FakeBookReadingRepository_17(
          this,
          Invocation.getter(#bookReadingRepository),
        ),
      ) as _i11.BookReadingRepository);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, List<_i21.BooksEntity>>>
      getBooksFromLocalDatabase() => (super.noSuchMethod(
            Invocation.method(
              #getBooksFromLocalDatabase,
              [],
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    List<_i21.BooksEntity>>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, List<_i21.BooksEntity>>(
              this,
              Invocation.method(
                #getBooksFromLocalDatabase,
                [],
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.LocalDatabaseFailure, List<_i21.BooksEntity>>>);
}

/// A class which mocks [GetFromFirebaseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFromFirebaseUsecase extends _i1.Mock
    implements _i27.GetFromFirebaseUsecase {
  MockGetFromFirebaseUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.BookReadingRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBookReadingRepository_17(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i11.BookReadingRepository);

  @override
  _i5.Future<_i10.Either<_i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>>
      getBooksFromFirestore() => (super.noSuchMethod(
            Invocation.method(
              #getBooksFromFirestore,
              [],
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.RemoteDatabaseFailure,
                    List<_i21.BooksEntity>>>.value(_FakeEither_16<
                _i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>(
              this,
              Invocation.method(
                #getBooksFromFirestore,
                [],
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.RemoteDatabaseFailure, List<_i21.BooksEntity>>>);
}

/// A class which mocks [GetFromLocalDatabaseUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFromLocalDatabaseUsecase extends _i1.Mock
    implements _i28.GetFromLocalDatabaseUsecase {
  MockGetFromLocalDatabaseUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.BookReadingRepository get bookReadingRepository => (super.noSuchMethod(
        Invocation.getter(#bookReadingRepository),
        returnValue: _FakeBookReadingRepository_17(
          this,
          Invocation.getter(#bookReadingRepository),
        ),
      ) as _i11.BookReadingRepository);

  @override
  _i5.Future<_i10.Either<_i20.LocalDatabaseFailure, _i29.CombinedEntityBook>>
      getReadingMaterialFromLocalDatabase({required _i21.BooksEntity? book}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getReadingMaterialFromLocalDatabase,
              [],
              {#book: book},
            ),
            returnValue: _i5.Future<
                _i10.Either<_i20.LocalDatabaseFailure,
                    _i29.CombinedEntityBook>>.value(_FakeEither_16<
                _i20.LocalDatabaseFailure, _i29.CombinedEntityBook>(
              this,
              Invocation.method(
                #getReadingMaterialFromLocalDatabase,
                [],
                {#book: book},
              ),
            )),
          ) as _i5.Future<
              _i10.Either<_i20.LocalDatabaseFailure, _i29.CombinedEntityBook>>);
}
